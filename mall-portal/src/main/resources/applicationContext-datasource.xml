<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       ">
    <!--读取配置文件-->
    <bean id="propertyPlaceholderConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order" value="2"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:datasource.properties</value>
                <value>classpath:mall.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="utf-8"/>
    </bean>
    <!--配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${datasource.initialSize}" />
        <property name="minIdle" value="${datasource.minIdle}" />
        <property name="maxActive" value="${datasource.maxActive}" />
        <!--配置获取连接等待超时的时间-->
        <property name="maxWait" value="${datasource.maxWait}" />
        <!--配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒-->
        <property name="timeBetweenEvictionRunsMillis" value="${datasource.timeBetweenEvictionRunsMillis}" />
        <!--配置一个连接在池中最小生存的时间，单位是毫秒-->
        <property name="minEvictableIdleTimeMillis" value="${datasource.minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${datasource.validationQuery}" />
        <property name="testWhileIdle" value="${datasource.testWhileIdle}" />
        <property name="testOnBorrow" value="${datasource.testOnBorrow}" />
        <property name="testOnReturn" value="${datasource.testOnReturn}" />
        <!--打开PSCache，并且指定每个连接上PSCache的大小-->
        <property name="poolPreparedStatements" value="${datasource.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${datasource.maxPoolPreparedStatementPerConnectionSize}" />
        <!--配置监控统计拦截的filters-->
        <property name="filters" value="${datasource.filters}" />
        <!--通过connectProperties属性来打开mergeSql功能；慢SQL记录-->
        <property name="connectionProperties" value="${datasource.connectionProperties}" />
        <!--合并多个DruidDataSource的监控数据-->
        <!-- 配置监控统计拦截的filters -->
        <property name="useGlobalDataSourceStat" value="${datasource.useGlobalDataSourceStat}" />
    </bean>
    <!--配置sqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:mappers/**.xml"/>
        <property name="typeAliasesPackage" value="com.mall.dao.pojo"/>
        <!--自定义类型处理器使用包扫描的方式-->
        <property name="typeHandlersPackage" value="com.mall.handler"/>
        <property name="plugins">
            <array>
                <!--分页插件-->
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>dialect=mysql</value>
                    </property>
                </bean>
                <bean class="com.mall.core.foundation.BaseInterceptor"/>
            </array>
        </property>
    </bean>
    <!--mapper扫描接口-->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.mall.dao.mapper"/>
    </bean>
    <!--事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
        <property name="rollbackOnCommitFailure" value="true"/>
    </bean>
    <!--  使用@Transactional进行声明式事务管理需要声明下面这行  -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
    <!--配置flyway-->
    <bean id="flyway" class="org.flywaydb.core.Flyway" init-method="migrate" depends-on="dataSource">
        <property name="dataSource" ref="dataSource"/>
        <property name="locations" value="migration"/>
        <property name="baselineOnMigrate" value="true"/>
    </bean>
</beans>